input {
    tcp {
        port => 5555
        codec => json
    }
}

filter {
    grok {
        match => ["user", "%{GREEDYDATA:[@metadata][user]}"]
    }
    grok {
        match => ["type_log", "%{GREEDYDATA:[@metadata][type_log]}"]
    }
    grok {
        match => ["uuid", "%{GREEDYDATA:[@metadata][uuid]}"]
    }
    if [type_log] =~ "bluecoat1" {
        csv {
            columns => ["syslogmonth", "syslogdatetime", "syslogtime", "source", "date", "time", "time-taken", "c-ip", "sc-status", "s-action", "sc-bytes", "cs-bytes", "cs-method", "cs-uri-scheme", "cs-host", "cs-uri-port", "cs-uri-path", "cs-uri-query", "cs-username", "cs-auth-group", "s-supplier-name", "rs(Content-Type)", "cs(Referer)", "cs(User-Agent)", "sc-filter-result", "cs-categories", "x-virus-id", "s-ip"]
            separator => " "
        }
        mutate {
            add_field => { "syslogdate" => "%{syslogmonth} %{syslogdatetime} %{syslogtime}" }
            remove_field => [ "syslogmonth","syslogdatetime","syslogtime" ]
        }
    }
    if [type_log] =~ "bluecoat" {
        csv {
            columns => ["date","localtime","time-taken","c-ip","sc-status","s-action","sc-bytes","cs-bytes","cs-method","cs-uri-scheme","cs-host","cs-uri-port","cs-uri-path","cs-uri-query","cs-username","cs-auth-group","s-hierarchy","s-supplier-name","rs(Content-Type)","cs(Referer)","cs(User-Agent)","sc-filter-result","cs-categories","x-virus-id","s-ip","s-sitename"]
            separator => " "
        }
    }
    if [type_log] =~ "bluecoat" {
        csv {
            columns => ["syslogmonth", "syslogdatetime", "syslogtime", "source","date", "time", "time-taken", "c-ip", "cs-username", "cs-auth-group", "x-exception-id", "sc-filter-result", "cs-categories", "cs(Referer)", "sc-status", "s-action", "cs-method", "rs(Content-Type)", "cs-uri-scheme", "cs-host", "cs-uri-port", "cs-uri-path", "cs-uri-query", "cs-uri-extension", "cs(User-Agent)", "s-ip", "sc-bytes", "cs-bytes", "x-virus-id", "x-bluecoat-application-name", "x-bluecoat-application-operation"]
            separator => " "
        }
        mutate {
            add_field => { "syslogdate" => "%{syslogmonth} %{syslogdatetime} %{syslogtime}" }
            remove_field => [ "syslogmonth","syslogdatetime","syslogtime" ]
        }
    }
    if [type_log] =~ "juniper" {
        if [message] =~ "ASP_SFW_CREATE_ACCEPT_FLOW" {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_CREATE_ACCEPT_FLOW.*\(%{DATA:ntype}\) application: .*%{IP:srcip}:%{INT:srcport} -> %{IP:dstip}:%{INT:dstport}.* %{IP:natip}:%{INT:natport}"]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_CREATE_ACCEPT_FLOW.*  %{IP:srcip}:%{INT:srcpport} \[%{IP:natip}:%{INT:natport}\] .* %{IP:dstip}:%{INT:dstport}.*\(%{DATA:ntype}\)"]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_CREATE_ACCEPT_FLOW.* %{IP:srcip}:%{INT:srcport}  ->  %{IP:dstip}:%{INT:dstport}.*\(%{DATA:ntype}\)"]
            }
            #mutate {
            #    remove_tag => [ "_grokparsefailure" ]
            #}
        }
        if [message] =~ "ASP_SFW_DELETE_FLOW" {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_DELETE_FLOW.*\(%{DATA:ntype}\) application: .*%{IP:srcip}:%{INT:srcport} -> %{IP:dstip}:%{INT:dstport}.* %{IP:natip}:%{INT:natport}"]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_DELETE_FLOW.*  %{IP:srcip}:%{INT:srcpport} \[%{IP:natip}:%{INT:natport}\] .* %{IP:dstip}:%{INT:dstport}.*\(%{DATA:ntype}\)"]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_DELETE_FLOW.* %{IP:srcip}:%{INT:srcport}  ->  %{IP:dstip}:%{INT:dstport}.*\(%{DATA:ntype}\)"]
            }:56:e1" dstmac="0:c:29:6a:35:64" srcip="192.168.1.41" dstip="119.28.48.223" proto="17" length="82" tos="0x00" prec="0x00" ttl="127" srcport="51713" dstport="5
            #mutate {
            #    remove_tag => [ "_grokparsefailure" ]
            #}
        }
        if [message] =~ "ASP_NAT_POOL_RELEASE" {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_NAT_POOL_RELEASE.* %{IP:natpoolip}:%{INT:natpoolp}"]
            }
            mutate {
                remove_tag => [ "_grokparsefailure" ]
            }
        }
    	if [message] =~ "JSERVICES_SESSION" {
    	    grok {
                match => [
                    "message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} %{DATA} application:%{DATA}, %{DATA} %{IP:src_ip}:%{INT:src_port} \[%{IP:nat_ip}:%{INT:nat_port}\]%{SPACE}->%{SPACE}%{IP:dst_ip}:%{INT:dst_port} \(%{DATA:ntype}\)",
                    "message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} %{DATA} application:%{DATA}, %{DATA} %{IP:src_ip}:%{INT:src_port}%{SPACE}->%{SPACE}%{IP:dst_ip}:%{INT:dst_port} \(%{DATA:ntype}\)"
                ]
            }
            #mutate {
            #    remove_tag => [ "_grokparsefailure" ]
            #}
        }
    }
    #date {
        #match => [ "syslogdate", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        #target => "syslogdate"
    #}
    mutate {
        remove_field => [ "host","port","user","uuid", "tags", "@version" ]
    }
}

output {
    elasticsearch {
        hosts => ["192.168.24.201:9200","192.168.24.202:9200","192.168.24.203:9200"]
        codec => "plain"
        workers => 16
        index => "logstash-%{[@metadata][user]}-%{[@metadata][uuid]}-%{+YYYY.MM.dd}"
        manage_template => true
        #template => "/etc/logstash/template/elasticsearch-template.json"
        template_name => "logstash"
        template_overwrite => false
        flush_size => 1000
        idle_flush_time => 1
    }
    #stdout { codec => rubydebug { metadata => true } }
}
