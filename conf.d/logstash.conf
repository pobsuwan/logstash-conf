input {
    stdin { 
        tags => [ "syslog" ]
    }
    #file {
    #    path => ["/home/softnixlogger/groups/514/122.155.12.45/*/mail/*.log"]
    #    start_position => "beginning"
    #    type => "syslog"
    #    tags => [ "syslog" ]
    #}
}

filter {

    ## SMTP ##
    if [type] == "syslog"{
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:logsource} .* go %{SYSLOGPROG}: %{GREEDYDATA:raw_message}"]
            ## match => ["message", "%{SYSLOGTIMESTAMP:timestamp2} %{IP:ip} .* go %{SYSLOGPROG}: .* server_login %{DATA:reason} for .*\[%{IP:srcip}\]:.* \(set_id=%{DATA:email_to}\)"]
            ## match => ["message", "%{SYSLOGTIMESTAMP:timestamp2} %{IP:ip} .* go %{SYSLOGPROG}: .* \[%{IP:srcip}\]: .*>: %{DATA:reason}"]
        }
        mutate {
            add_field => { "event_type" => "smtp_auth" }
        }
    }
    ## End SMTP ##

    if "syslog" in [tags] {
        if [raw_message] =~ /server_login/ {
            mutate {
                add_tag => [ "auth_smtp_log", "mail" ]
            }
        }
        if "mail" not in [tags] {
            mutate {
                add_tag => [ "generic_maillog" ]
            }
        }
    }

    if "auth_smtp_log" in [tags] {
        grok {
            break_on_match => false
            match => [ "raw_message", ".* server_login %{DATA:reason} for .*\[%{IP:srcip}\]:.* \(set_id=%{DATA:email_to}\)" ]
        }
        mutate {
            remove_field => [ "raw_message" ]
        }
    }
}

output {
    if !("_grokparsefailure" in [tags]) {
        #stdout { codec => rubydebug }
    #   elasticsearch {
    #        host => ["localhost"]
    #        codec => "plain"
    #        workers => 1
    #        index => "logstash-%{+YYYY.MM.dd}"
    #        manage_template => true
    #        template_name => "logstash"
    #        template_overwrite => false
    #        port => 9200
    #        flush_size => 100
    #        idle_flush_time => 1
    #        protocol => "http"
    #    }
    }

    if ("_grokparsefailure" in [tags]) {
        stdout { codec => rubydebug }
    }
}

###########################################################################
input {
    file {
        path => ["/home/softnixlogger/groups/10901/CrownSeal/2015-10-27/local1/info.log"]
        start_position => "beginning"
        type => "web"
        sincedb_path => "/dev/null"
    }
}

filter {
    ## WG Web log ##
    if [type] =~ "web"{
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:hostname} %{SYSLOGPROG:syslog_prog}: msg_id=\".*\" %{DATA:action} .* %{IPV4:dstip} %{IPV4:scrip} %{INT:srcport} %{INT:dstport} msg=\"%{DATA:msg}\" proxy_act=\"%{DATA:proxy_act}\" service=\"%{DATA:service}\" cats=\"%{DATA:cats}\" dstname=\"%{DATA:dstname}\" src_user=\"%{DATA:src_user}\""]
        }
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:hostname} %{SYSLOGPROG:syslog_prog}: msg_id=\".*\" %{DATA:action} .* %{IPV4:dstip} %{IPV4:scrip} %{INT:srcport} %{INT:dstport} msg=\"%{DATA:msg}\" proxy_act=\"%{DATA:proxy_act}\" cats=\"%{DATA:cats}\" .* dstname=\"%{DATA:dstname}\" .* src_user=\"%{DATA:src_user}\""]
        }
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:hostname} %{SYSLOGPROG:syslog_prog}: msg_id=\".*\" %{DATA:action} .* %{IPV4:dstip} %{IPV4:scrip} %{INT:srcport} %{INT:dstport} msg=\"%{DATA:msg}\" proxy_act=\"%{DATA:proxy_act}\" .* dstname=\"%{DATA:dstname}\" arg=\"%{DATA:arg}\" sent_bytes=\"%{INT:sent_bytes}\" rcvd_bytes=\"%{INT:rcvd_bytes}\" .* src_user=\"%{DATA:src_user}\""]
        }
        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
            #locale => "en"
            target => "received_at"
        }
        mutate {
            remove_tag => [ "_grokparsefailure" ]
            add_field => { "event_type" => "web" }
            #replace => [ "received_at", "%{@timestamp}" ]
        }
        geoip {
            source => "dstip"
            target => "geoip"
            database => "/etc/logstash/GeoLiteCity.dat"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float"]
        }
    }

}

output {
    if !("_grokparsefailure" in [tags]) {
        #stdout { codec => rubydebug }
        elasticsearch {
            hosts => ["localhost:9200"]
            codec => "plain"
            workers => 1
            index => "watchguard"
            # manage_template => true
            template => "/etc/logstash/elasticsearch-template.json"
            template_name => "watchguard"
            template_overwrite => true
            flush_size => 500
            idle_flush_time => 1
        }
    }
}


###########################################################################

input {
    file {
        path => ["/home/softnixlogger/groups/10901/CrownSeal/2015-10-27/local1/warning.log"]
        start_position => "beginning"
        type => "fw"
        sincedb_path => "/dev/null"
    }
}

filter {
    ## WG Web log ##
    if [type] =~ "fw"{
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:devices} %{SYSLOGPROG:syslog_prog}: msg_id=\".*\" %{DATA:action} .* %{IPV4:dstip} %{IPV4:scrip} %{INT:srcport} %{INT:dstport}"]
        }
        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
            #locale => "en"
            target => "received_at"
        }
        mutate {
            # remove_tag => [ "_grokparsefailure" ]
            add_field => { "event_type" => "fw" }
            #replace => [ "received_at", "%{@timestamp}" ]
        }
        geoip {
            source => "dstip"
            target => "geoip"
            database => "/etc/logstash/GeoLiteCity.dat"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float"]
        }
    }

}

output {
    if !("_grokparsefailure" in [tags]) {
        #stdout { codec => rubydebug }
        elasticsearch {
            hosts => ["localhost:9200"]
            codec => "plain"
            workers => 1
            index => "watchguard"
            # manage_template => true
            template => "/etc/logstash/elasticsearch-template.json"
            template_name => "watchguard"
            template_overwrite => true
            flush_size => 1000
            idle_flush_time => 1
        }
    }
}


###########################################################################

input {
    file {
        path => ["/home/softnixlogger/groups/10901/CrownSeal/2015-10-27/local1/*.log"]
        start_position => "beginning"
        type => "web"
        tags => [ "web" ]
        sincedb_path => "/dev/null"
    }
}

filter {
    ## WG Web log ##
    if [type] =~ "web"{
        grok {
            match => ["raw_message", "%{SYSLOGTIMESTAMP:received_at} %{IPORHOST:hostname} %{SYSLOGPROG:syslog_prog}: %{GREEDYDATA:raw_message}"]
        }
        mutate {
            add_field => { "event_type" => "web" }
        }
    }

    if "web" in [tags] {
        if [raw_message] =~ /^service=/ {
            mutate {
                add_tag => [ "service", "other" ]
            }
        }
        if [raw_message] =~ /^cats=/ {
            mutate {
                add_tag => [ "cats", "other" ]
            }
        }
        if [raw_message] =~ /^sent_bytes=/ {
            mutate {
                add_tag => [ "sent_bytes", "other" ]
            }
        }
        if "other" not in [tags] {
            mutate {
                add_tag => [ "generic_log" ]
            }
        }
    }

    if "service" in [tags] {
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:received_at} %{HOSTNAME:hostname} %{SYSLOGPROG:syslog_prog}: msg_id=\".*\" %{DATA:action} .* %{IPV4:dstip} %{IPV4:scrip} %{INT:srcport} %{INT:dstport} msg=\"%{DATA:msg}\" proxy_act=\"%{DATA:proxy_act}\" service=\"%{DATA:service}\" cats=\"%{DATA:cats}\" dstname=\"%{DATA:dstname}\" src_user=\"%{DATA:src_user}\""]
        }
        mutate {
            remove_field => [ "raw_message" ]
        }
    }

    if "cats" in [tags] {
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:received_at} %{HOSTNAME:hostname} %{SYSLOGPROG:syslog_prog}: msg_id=\".*\" %{DATA:action} .* %{IPV4:dstip} %{IPV4:scrip} %{INT:srcport} %{INT:dstport} msg=\"%{DATA:msg}\" proxy_act=\"%{DATA:proxy_act}\" cats=\"%{DATA:cats}\" .* dstname=\"%{DATA:dstname}\" .* src_user=\"%{DATA:src_user}\""]
        }
        mutate {
            remove_field => [ "raw_message" ]
        }
        geoip {
            source => "dstip"
            target => "geoip"
            database => "/etc/logstash/GeoLiteCity.dat"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float"]
        }
    }

    if "sent_bytes" in [tags] {
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:received_at} %{HOSTNAME:hostname} %{SYSLOGPROG:syslog_prog}: msg_id=\".*\" %{DATA:action} .* %{IPV4:dstip} %{IPV4:scrip} %{INT:srcport} %{INT:dstport} msg=\"%{DATA:msg}\" proxy_act=\"%{DATA:proxy_act}\" .* dstname=\"%{DATA:dstname}\" arg=\"%{DATA:arg}\" sent_bytes=\"%{INT:sent_bytes}\" rcvd_bytes=\"%{INT:rcvd_bytes}\" .* src_user=\"%{DATA:src_user}\""]
        }
        mutate {
            remove_field => [ "raw_message" ]
        }
        geoip {
            source => "dstip"
            target => "geoip"
            database => "/etc/logstash/GeoLiteCity.dat"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float"]
        }
    }

    if "generic_log" in [tags] {
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:received_at} %{HOSTNAME:hostname} %{SYSLOGPROG:syslog_prog}: msg_id=\".*\" %{DATA:action} .* %{IPV4:dstip} %{IPV4:scrip} %{INT:srcport} %{INT:dstport}"]
        }
        mutate {
            remove_field => [ "raw_message" ]
        }
        geoip {
            source => "dstip"
            target => "geoip"
            database => "/etc/logstash/GeoLiteCity.dat"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float"]
        }
    }

}

output {
    if ("_grokparsefailure" in [tags]) {
        stdout { codec => rubydebug }
    }
}

###########################################################################

input {
    beats {
        port => 5044
    }
}

output {
    #stdout { codec => rubydebug }
    kafka {
        #topic_id คือหมายเลข customerID
        topic_id => '10881'
    }
}

###########################################################################

input {
    kafka {
        zk_connect => "collector01.cloudapp.net:2181"
        topic_id => 'lab1'
    }
}

filter {
    if [shipper] == "Collector01"{
        grok {
            match => ["source", "\/home\/softnixlogger\/groups\/%{INT:PortID}\/%{IPV4:sourcedata}\/%{INT:[@metadata][year]}-%{INT:[@metadata][month]}-%{INT:[@metadata][day]}\/%{INT:[@metadata][hour]}\/%{DATA:Fac}\/%{DATA:Pri}\.log"]
        }
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:host} %{SYSLOGPROG}: %{GREEDYDATA:raw_message}"]
        }
        date {
            match => [ "log_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
            locale => "en"
            target => "received_at"
        }
        mutate {
            remove_field => [ "log_timestamp" ]
        }
    }
}


output {
    if [shipper]=="Collector01" {
        elasticsearch {
            hosts => ["localhost:9200"]
            codec => "plain"
            workers => 1
            index => "10881-%{+YYYY.MM.dd}"
            manage_template => true
            template_name => "logstash"
            template_overwrite => false
            flush_size => 500
            idle_flush_time => 1
        }

        #stdout { codec => rubydebug }
        file {
            codec => line {
                format => "%{message}"
            }
            path => ["/home/softnixlogger/groups/10881/%{sourcedata}/%{[@metadata][year]}-%{[@metadata][month]}-%{[@metadata][day]}/%{[@metadata][hour]}/%{Fac}/%{Pri}.log"]
        }

        file {
            codec => "plain"
            message_format => "%{message}"
            path => ["/home/softnixlogger/groups/10881/%{sourcedata}/%{[@metadata][year]}-%{[@metadata][month]}-%{[@metadata][day]}/%{[@metadata][hour]}/%{Fac}/%{Pri}.log"]
        }

        if ("_grokparsefailure" in [tags]) {
            file {
                codec => "plain"
                message_format => "%{message}"
                path => ["/home/softnixlogger/grokfailed/10881/%{sourcedata}/%{[@metadata][year]}-%{[@metadata][month]}-%{[@metadata][day]}/%{[@metadata][hour]}/%{Fac}/%{Pri}.log"]
            }
        }
    }
}


input {
    exec {
        command => "zcat /home/admin/Downloads/info.log.gz"
        interval => 5
    }
}

input {
    pipe {
        command => "/bin/gunzip -c /home/admin/Downloads/info.log.gz"
    }
}

input {
    tcp {
        port => 5055
    }
}

output { stdout { codec => rubydebug } }


###########################################################

input {

    #stdin { }
    file {
        path => ["/home/softnixlogger/groups/514/127.0.0.1/*/*/*/*.log"]
        start_position => "beginning"
    }
}

filter {
    grok {
        match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:host} %{SYSLOGPROG}: %{GREEDYDATA:raw_message}"]
    }
    syslog_pri { }
    date {
        match => [ "log_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        locale => "en"
        target => "received_at"
    }
    mutate {
        remove_field => [ "log_timestamp" ]
    }
}

output {
    elasticsearch {
        hosts => ["127.0.0.1:9200"]
        codec => "plain"
        workers => 1
        index => "logstash-514-%{+YYYY.MM.dd}"
        manage_template => true
        template => "/etc/logstash/template/elasticsearch-template.json"
        template_name => "logstash"
        template_overwrite => true
        flush_size => 500
        idle_flush_time => 1

    }

}

###########################################################
input {

    #stdin { }
    file {
        type => "ips"
        path => ["/home/softnixlogger/groups/514/122.155.12.45/*/*/daemon/alert.log"]
        start_position => "beginning"
    }
    file {
        type => "nat"
        path => ["/home/softnixlogger/groups/514/122.155.12.45/*/*/daemon/info.log"]
        start_position => "beginning"
    }
    file {
        type => "auth_smtp"
        path => ["/home/softnixlogger/groups/514/122.155.12.45/*/*/mail/notice.log"]
        start_position => "beginning"
    }
}

filter {

    ## IPS ##
    if [type] =~ "ips"{
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:@timestamp} %{SYSLOGHOST:host} .* %{SYSLOGPROG}: id=\"%{INT:id}\" severity=\"%{DATA:severity}\" sys=\"%{DATA:sys}\" sub=\"%{DATA:sub}\" name=\"%{DATA:name}\" action=\"%{DATA:action}\" reason=\"%{DATA:reason}\" .* srcip=\"%{IP:srcip}\" dstip=\"%{IP:dstip}\" .* dstport=\"%{POSINT:dstport}\" sid=\"%{INT:sid}\" class=\"%{DATA:class}\""]
            }
        mutate {
            add_field => { "event_type" => "ips" }
            replace => {"host"=>"122.155.12.45"}
        }
    }
    ## End IPS ##

    ## NAT ##
    if [type] =~ "nat"{
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:@timestamp} .* go %{SYSLOGPROG}: .* action=\"%{DATA:action}\" .* srcip=\"%{IP:srcip}\" dstip=\"%{IP:dstip}\" .* dstport=\"%{POSINT:dstport}\""]
        }
        mutate {
            add_field => { "event_type" => "nat" }
            replace => {"host"=>"122.155.12.45"}
        }
    }
    ## End NAT ##

    ## SMTP ##
    if [type] =~ "auth_smtp"{
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:@timestamp} .* go %{SYSLOGPROG}: .* server_login %{DATA:reason} for .*\[%{IP:srcip}\]:.* \(set_id=%{DATA:email_to}\)"]
        }
        mutate {
            add_field => { "event_type" => "smtp" }
            replace => {"host"=>"122.155.12.45"}
        }
    }
    ## End NAT ##

    geoip {
        source => "srcip"
        target => "geoip"
        database => "/etc/logstash/GeoLiteCity.dat"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
        convert => [ "[geoip][coordinates]", "float"]
    }
}

input {

    file {
        type => "ciscowifi"
        path => ["/home/softnixlogger/groups/514/58.11.119.153/*/*/local0/info.log"]
        start_position => "beginning"
    }
}


filter {

    if [type] =~ "ciscowifi"{
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:host} .* src=%{IP:srcip}:%{POSINT:srcport} dst=%{IP:dstip}:%{POSINT:dstport} mac=%{DATA:mac} request: %{DATA:method} %{GREEDYDATA:url}"]
        }
        mutate {
            add_field => { "event_type" => "ciscowifi" }
            replace => {"host"=>"58.11.119.153"}
        }
    }

    geoip {
        source => "srcip"
        target => "geoip"
        database => "/etc/logstash/GeoLiteCity.dat"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
        convert => [ "[geoip][coordinates]", "float"]
    }
}

###########################################################

input {
    file {
        path => ["/home/softnixlogger/offlinelog/*.log"]
        start_position => "beginning"
    }
}

filter {
    grok {
        match => ["path", "\/home\/softnixlogger\/offlinelog\/%{INT:[@metadata][userid]}_%{DATA:[@metadata][uuid]}\.log"]
    }
    grok {
        match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source} %{SYSLOGPROG}: %{GREEDYDATA:raw_message}"]
    }
    #syslog_pri { }
    date {
        match => [ "log_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        locale => "en"
        target => "received_at"
    }
    mutate {
        remove_field => [ "log_timestamp" ]
    }
}

output {
    elasticsearch {
        hosts => ["192.168.10.231:9200","192.168.10.232:9200"]
        codec => "plain"
        workers => 4
        index => "logstash-%{[@metadata][userid]}-%{+YYYY.MM.dd}"
        manage_template => true
        #template => "/etc/logstash/template/elasticsearch-template.json"
        template_name => "logstash"
        template_overwrite => false
        flush_size => 500
        idle_flush_time => 1
    }
}

input {
    tcp {
        port => 5555
        codec => json
    }
}

filter {
    grok {
        match => ["user", "%{GREEDYDATA:[@metadata][user]}"]
    }
    grok {
        match => ["type_log", "%{GREEDYDATA:[@metadata][type_log]}"]
    }
    grok {
        match => ["uuid", "%{GREEDYDATA:[@metadata][uuid]}"]
    }
    if [type_log] =~ "juniper"{
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source}.*NetScreen device_id=%{DATA:device_id} .*: start_time=\"%{DATA:start_time}\" duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{DATA:src_zone} dst zone=%{DATA:dst_zone} action=%{DATA:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IP:src} dst=%{IP:dst} src_port=%{INT:src_port} dst_port=%{INT:dst_port}.*session_id=%{INT:session_id} reason=%{GREEDYDATA:reason}"]
        }
        if ("_grokparsefailure" in [tags]) {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source}.*NetScreen device_id=%{DATA:device_id} .*: start_time=\"%{DATA:start_time}\" duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{DATA:src_zone} dst zone=%{DATA:dst_zone} action=%{DATA:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IP:src} dst=%{IP:dst} src_port=%{INT:src_port} dst_port=%{INT:dst_port}.*session_id=%{INT:session_id}"]
            }
        #}
        #if ("_grokparsefailure" in [tags]) {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source}.*NetScreen device_id=%{DATA:device_id} .*: start_time=\"%{DATA:start_time}\" duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{DATA:src_zone} dst zone=%{DATA:dst_zone} action=%{DATA:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IP:src} dst=%{IP:dst} icmp .*session_id=%{INT:session_id} reason=%{GREEDYDATA:reason}"]
            }
            mutate {
                remove_tag => [ "_grokparsefailure" ]
            }
        }
    }
    if [type_log] =~ "bluecoat" {
        csv {
            columns => ["date", "time", "time-taken", "c-ip", "sc-status", "s-action", "sc-bytes", "cs-bytes", "cs-method", "cs-uri-scheme", "cs-host", "cs-uri-port", "cs-uri-path", "cs-uri-query", "cs-username", "cs-auth-group", "s-supplier-name", "rs(Content-Type)", "cs(Referer)", "cs(User-Agent)", "sc-filter-result", "cs-categories", "x-virus-id", "s-ip"]
            separator => " "
        }
    }
    mutate {
        remove_field => [ "host","port","user","uuid", "tags" ]
    }
}

filter {
    grok {
        match => ["user", "%{GREEDYDATA:[@metadata][user]}"]
    }
    grok {
        match => ["type_log", "%{GREEDYDATA:[@metadata][type_log]}"]
    }
    grok {
        match => ["uuid", "%{GREEDYDATA:[@metadata][uuid]}"]
    }
    if [type_log] =~ "juniper"{
        grok {
            match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source} %{IPORHOST}: NetScreen device_id=%{WORD:device_id}%{DATA}: start_time=\"%{DATA:start_time}\" duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{WORD:src_zone} dst zone=%{WORD:dst_zone} action=%{WORD:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IPORHOST:src_ip} dst=%{IPORHOST:dst_ip} src_port=%{INT:src_port} dst_port=%{INT:dst_port} src-xlated ip=%{IPORHOST} port=%{INT} dst-xlated ip=%{IPORHOST} port=%{INT} session_id=%{INT:session_id} reason=%{GREEDYDATA:reason}"]
        }
        if ("_grokparsefailure" in [tags]) {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source} %{IPORHOST}: NetScreen device_id=%{WORD:device_id}%{DATA}: start_time=\"%{DATA:start_time}\" duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{WORD:src_zone} dst zone=%{WORD:dst_zone} action=%{WORD:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IPORHOST:src_ip} dst=%{IPORHOST:dst_ip} src_port=%{INT:src_port} dst_port=%{INT:dst_port} session_id=%{INT:session_id}"]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source} %{IPORHOST}: NetScreen device_id=%{WORD:device_id}%{DATA}: start_time=\"%{DATA:start_time}\" duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{WORD:src_zone} dst zone=%{WORD:dst_zone} action=%{WORD:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IPORHOST:src_ip} dst=%{IPORHOST:dst_ip} icmp .*session_id=%{INT:session_id} reason=%{GREEDYDATA:reason}"]
            }
            mutate {
                remove_tag => [ "_grokparsefailure" ]
            }
        }
    }
	if [type_log] =~ "bluecoat" {
        csv {
            columns => ["date", "time", "time-taken", "c-ip", "sc-status", "s-action", "sc-bytes", "cs-bytes", "cs-method", "cs-uri-scheme", "cs-host", "cs-uri-port", "cs-uri-path", "cs-uri-query", "cs-username", "cs-auth-group", "s-supplier-name", "rs(Content-Type)", "cs(Referer)", "cs(User-Agent)", "sc-filter-result", "cs-categories", "x-virus-id", "s-ip"]
            separator => " "
        }
    }
    mutate {
        remove_field => [ "host","port","user","uuid" ]
    }
}

filter {
    grok {
        match => ["user", "%{GREEDYDATA:[@metadata][user]}"]
    }
    grok {
        match => ["type_log", "%{GREEDYDATA:[@metadata][type_log]}"]
    }
    grok {
        match => ["uuid", "%{GREEDYDATA:[@metadata][uuid]}"]
    }
    if [type_log] =~ "juniper"{
        grok {
            match => [
                "message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source} %{IPORHOST}: NetScreen device_id=%{WORD:device_id}%{DATA}: start_time=\"%{DATA:start_time}\" duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{WORD:src_zone} dst zone=%{WORD:dst_zone} action=%{WORD:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IPORHOST:src_ip} dst=%{IPORHOST:dst_ip} src_port=%{INT:src_port} dst_port=%{INT:dst_port} src-xlated ip=%{IPORHOST} port=%{INT} dst-xlated ip=%{IPORHOST} port=%{INT} session_id=%{INT:session_id} reason=%{GREEDYDATA:reason}",
                "message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source} %{IPORHOST}: NetScreen device_id=%{WORD:device_id}%{DATA}: start_time=\"%{DATA:start_time}\" duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{WORD:src_zone} dst zone=%{WORD:dst_zone} action=%{WORD:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IPORHOST:src_ip} dst=%{IPORHOST:dst_ip} src_port=%{INT:src_port} dst_port=%{INT:dst_port} session_id=%{INT:session_id}",
                "message", "%{SYSLOGTIMESTAMP:log_timestamp} %{IPORHOST:source} %{IPORHOST}: NetScreen device_id=%{WORD:device_id}%{DATA}: start_time=\"%{DATA:start_time}\" duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{WORD:src_zone} dst zone=%{WORD:dst_zone} action=%{WORD:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IPORHOST:src_ip} dst=%{IPORHOST:dst_ip} icmp .*session_id=%{INT:session_id} reason=%{GREEDYDATA:reason}"
            ]
        }
    }
    if [type_log] =~ "bluecoat" {
        csv {
            columns => ["date", "time", "time-taken", "c-ip", "sc-status", "s-action", "sc-bytes", "cs-bytes", "cs-method", "cs-uri-scheme", "cs-host", "cs-uri-port", "cs-uri-path", "cs-uri-query", "cs-username", "cs-auth-group", "s-supplier-name", "rs(Content-Type)", "cs(Referer)", "cs(User-Agent)", "sc-filter-result", "cs-categories", "x-virus-id", "s-ip"]
            separator => " "
        }
    }
    mutate {
        remove_field => [ "host","port","user","uuid" ]
    }
}

output {
    elasticsearch {
        hosts => ["192.168.10.231:9200","192.168.10.232:9200"]
        codec => "plain"
        workers => 8
        index => "logstash-%{[@metadata][user]}-%{[@metadata][uuid]}-%{+YYYY.MM.dd}"
        manage_template => true
        #template => "/etc/logstash/template/elasticsearch-template.json"
        template_name => "logstash"
        template_overwrite => false
        flush_size => 1000
        idle_flush_time => 1
    }
    if ("_grokparsefailure" in [tags]) {
        stdout { codec => rubydebug { metadata => true } }
    }
}

