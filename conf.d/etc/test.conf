input {
    tcp {
        port => 5556
        codec => json
    }
}

filter {
    grok {
        match => ["user", "%{GREEDYDATA:[@metadata][user]}"]
    }
    grok {
        match => ["type_log", "%{GREEDYDATA:[@metadata][type_log]}"]
    }
    grok {
        match => ["uuid", "%{GREEDYDATA:[@metadata][uuid]}"]
    }
    if [type_log] =~ "bluecoat" {
        csv {
            columns => ["syslogmonth", "syslogdatetime", "syslogtime", "source", "date", "time", "time-taken", "c-ip", "sc-status", "s-action", "sc-bytes", "cs-bytes", "cs-method", "cs-uri-scheme", "cs-host", "cs-uri-port", "cs-uri-path", "cs-uri-query", "cs-username", "cs-auth-group", "s-supplier-name", "rs(Content-Type)", "cs(Referer)", "cs(User-Agent)", "sc-filter-result", "cs-categories", "x-virus-id", "s-ip"]
            separator => " "
        }
        mutate {
            add_field => { "syslogdate" => "%{syslogmonth} %{syslogdatetime} %{syslogtime}" }
            remove_field => [ "syslogmonth","syslogdatetime","syslogtime" ]
        }
    }
    if [type_log] =~ "juniper" {
        if [message] =~ "ASP_SFW_CREATE_ACCEPT_FLOW" {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_CREATE_ACCEPT_FLOW.*\(%{DATA:ntype}\) application: .*%{IP:srcip}:%{INT:srcport} -> %{IP:dstip}:%{INT:dstport}.* %{IP:natip}:%{INT:natport}"]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_CREATE_ACCEPT_FLOW.*  %{IP:srcip}:%{INT:srcpport} \[%{IP:natip}:%{INT:natport}\] .* %{IP:dstip}:%{INT:dstport}.*\(%{DATA:ntype}\)"]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_CREATE_ACCEPT_FLOW.* %{IP:srcip}:%{INT:srcport}  ->  %{IP:dstip}:%{INT:dstport}.*\(%{DATA:ntype}\)"]
            }
            mutate {
                remove_tag => [ "_grokparsefailure" ]
            }
        }
        if [message] =~ "ASP_SFW_DELETE_FLOW" {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_DELETE_FLOW.*\(%{DATA:ntype}\) application: .*%{IP:srcip}:%{INT:srcport} -> %{IP:dstip}:%{INT:dstport}.* %{IP:natip}:%{INT:natport}"]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_DELETE_FLOW.*  %{IP:srcip}:%{INT:srcpport} \[%{IP:natip}:%{INT:natport}\] .* %{IP:dstip}:%{INT:dstport}.*\(%{DATA:ntype}\)"]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_SFW_DELETE_FLOW.* %{IP:srcip}:%{INT:srcport}  ->  %{IP:dstip}:%{INT:dstport}.*\(%{DATA:ntype}\)"]
            }
            mutate {
                remove_tag => [ "_grokparsefailure" ]
            }
        }
        if [message] =~ "ASP_NAT_POOL_RELEASE" {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .*ASP_NAT_POOL_RELEASE.* %{IP:natpoolip}:%{INT:natpoolp}"]
            }
            mutate {
                remove_tag => [ "_grokparsefailure" ]
            }
        }

        if [message] =~ "JSERVICES_SESSION" {
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .* application.* %{IP:srcip}:%{INT:srcport} \[%{IP:natip}:%{INT:natport}\] ->.*%{IP:dstip}:%{INT:dstport} \(%{DATA:ntype}\)"]
            }
            mutate {
                #remove_field => [ "syslogdate","source","srcip","srcport", "dstip", "dstport", "ntype" ]
            }
            grok {
                match => ["message", "%{SYSLOGTIMESTAMP:syslogdate} %{IPORHOST:source} .* application.* %{IP:srcip}:%{INT:srcport} ->.*%{IP:dstip}:%{INT:dstport} \(%{DATA:ntype}\)"]
            }
            mutate {
                remove_tag => [ "_grokparsefailure" ]
            }
        }
    }
    #date {
        #match => [ "syslogdate", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        #target => "syslogdate"
    #}
    mutate {
        remove_field => [ "host","port","user","uuid", "tags", "@version" ]
    }
}

output {
    #if !("_grokparsefailure" in [tags]) {
        stdout { codec => rubydebug { metadata => true } }
    #}
}

